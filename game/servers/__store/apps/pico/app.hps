
load_translation('tr/${lang}.json');

var _init = false, cursor = {y: 0}, lines = [], display, pico, resolver, filepath, fixBug = false;
var tmp_file = '/users/' + serverUser + '/.tmp/pico.file';

register('pico', {
  legend   : tr('Text editor'),
  async    : true,
  arguments: [
    {
      _       : 'path',
      legend  : tr('Filename')
    }
  ],
  callback : function(path, resolve) {
    function updateScreen(line) {
      if(typeof line !== 'undefined') {
        // Update the content
        lines[cursor.y] = pico.get_command();

        // Update the cursor's position
        cursor.y = line;
      }

      // Display the text
      pico.clear();
      display.html('');

      for(var i = 0; i < lines.length; i++) {
        if(i < cursor.y)
          pico.echo(lines[i] || ' ');
        else if(i > cursor.y)
          display.append(
            $('<div><div style="width:100%;"><span></span></div></div>')
              .find('span')
              .text(lines[i])
              .parent().parent()
          );
      }

      display.append(
        $('<div><div style="width:100%;"><span style="background-color:white;color:black;">Ctrl+X</span>&nbsp;<span>' + tr('Exit') + '</span></div></div>')
      );

      // Get the current displaying line
      pico.set_command(lines[cursor.y]);
    }

    function getAllText() {
      var txt = clone(lines);
      txt[cursor.y] = pico.get_command();
      return txt.join('\n');
    }

    // Initialization process
    if(!_init) {
      $('body').append(
        (pico = $(document.createElement('div'))
          .attr('id', 'app-pico-editor')
          .css({
            position : 'absolute',
            top      : 0,
            left     : 0,
            right    : 0,
            bottom   : 0,
            'z-index': 2
          }
        )).hide()
      );

      pico.terminal(function() { console.warn('[Pico] Interpreter has been called') }, {
        greetings: '',
        name     : 'Pico editor',
        prompt   : '',
        onInit   : function() {
          _init = true;

          pico.css('overflow', 'auto');

          $('#app-pico-editor').append(
            (display = $('<div class="terminal-output"></div>')
              .attr('id', 'app-pico-lines')
              .html('<div><div style="width:100%;"><span></span></div></div>'))
          );

        },
        keydown  : function(e) {
          // Here is all the program !

          var ctrl = !!e.ctrlKey;

          if(is_printable(e.keyCode, true) && !ctrl)
            return ;

          // Special actions for Control+<key>
          if(ctrl) {
            var char = String.fromCharCode(e.keyCode).toLocaleUpperCase();

            switch(char) {
              case 'X':
              case 'Q':
              case 'S':
                pico.hide();
                term.focus();

                //ignoreKeys = false;

                confirm(tr('Do you want to save changes ?'), function(ans) {
                  if(!ans)
                    return resolver();

                  if(filepath) {
                    if(!server.writeFile(filepath, getAllText()))
                      resolver('${err:' + tr('Failed to write file') + '}');
                    else
                      resolver();
                  } else {
                    //ignoreKeys = false;

                    question(tr('Please input the file path') + ' [' + tmp_file + '] :', function(ans) {
                      if(ans && !server.writeFile(ans, getAllText()))
                        resolver('${err:' + tr('Failed to write file') + '}');
                      else if(ans)
                        resolver();
                      else {
                        if(!needsWrite(tmp_file))
                          return resolver();

                        if(!server.writeFile(tmp_file, getAllText()))
                          resolver('${err:' + tr('Failed to write changes in a temporary file') + '}');
                        else
                          resolver(tr('All changes were written in') + ' ' + tmp_file);
                      }
                    });
                  }
                });

                break;
            }

            return false;
          }

          // For one-key only pression :
          var char = chars[e.keyCode];

          switch(char) {
            case 'left' :
            case 'right':
            case 'delete'   :
            case 'backspace':
              return ;
              break;

            case 'up':
              if(cursor.y)
                updateScreen(cursor.y - 1);

              break;

            case 'down':
              if(lines.length >= cursor.y + 2)
                updateScreen(cursor.y + 1);

              break;

            case 'enter':
              if(fixBug) {
                // Fix a tiny jQuery.terminal bug that simulate 'Return' key pressing
                // When .focus() is called
                fixBug = false;
                return ;
              }

              lines.splice(cursor.y + 1, 0, '');
              updateScreen(cursor.y + 1);
              break;
          }

          return false;
        }
      });

      return ;
    }

    if(path) {
      if(!needsRead(path))
        return resolve();

      var input = server.readFile(path);

      if(input === false)
        return resolve('${red:' + tr('Failed to read file') + '}');

      lines = input.split('\n');
    } else
      lines = [''];

    cursor   = {y: 0} ;
    resolver = resolve;
    filepath = path   ;
    fixBug   = true   ;

    pico.show();
    pico.set_prompt('');
    pico.clear().focus();
    updateScreen();
  }
});

getcmd('pico').callback();
