
load_translation('tr/${lang}.json');

var ROOT_DIR, config = false, err, defaultConfig = {}, global_callback;

function loadConfig() {
  if(!server.dirExists(ROOT_DIR)) {
    if(!tokenWrite(ROOT_DIR))
      return ;

    if(!server.mkdir(ROOT_DIR))
      return ;
  }

  if(server.fileExists(ROOT_DIR + '/config.rc'))
    config = server.readJSON(ROOT_DIR + '/config.rc');
  else {
    // If the write fail, that's not a problem because we put the default configuration here
    server.writeFile(ROOT_DIR + '/config.rc', defaultConfig);
    config = clone(defaultConfig);
  }
}

whenLogged(function() {
  ROOT_DIR = '/users/' + serverUser + '/.appdata/mailbox'; config = false; err; defaultConfig = {};

  if(!tokenRead(ROOT_DIR))
    err = tr('Mailbox requires an access to appdata directory');

  loadConfig();
});

register('mail-cli', {
  legend   : tr('Manage your emails'),
  arguments: [],
  async    : true,
  callback : function(resolve) {
    global_callback = resolve;

    if(!config) {
      if(err)
        return resolve_error('${red:' + err + '}');
      else
        loadConfig();
    }

    // If no account has been configured yet
    if(!config.account) {
      display(tr('You haven\'t configured any account yet'));
      display(tr('Please fill your identifiers now to use Mailbox'));
      display('');
      ignoreKeys = false;

      // Input the email adress
      question(tr('Email    :'), function(email) {
        term.set_prompt('Checking...'); ignoreKeys = true;

        // Ask the server : Does this adress exist ?
        req('mailbox.net/exists-adress', {adress: email}, function(content) {
          // If the server doesn't return 'true', this adress doesn't exist
          if(content !== 'true')
            return resolve('${red:' + tr('This email adress doen\'t exist.') + '}');

          ignoreKeys = false;
          // Input the password
          question(tr('Password :'), function(pass) {
            _login(email, pass, resolve);
          });
        });
      });
    } else {
      // After this (very) big condition, if the code here is runned
      // User is already logged and account informations have been loaded into the configuration file

      // Do stuff here...

      var g_menu, g_box;

      function boxesMenu(content) {
        term.clear();
        var boxes = Object.keys(content), names = [];

        for(var i = 0; i < boxes.length; i++)
          names.push(tr(content[boxes[i]]));

        ignoreKeys = false;
        choice(names.concat('${cyan:' + tr('Cancel') + '}'), function(num, txt) {
          ignoreKeys = true; term.set_prompt('');

          if(num === names.length + 1)
            return resolve();

          g_menu = content;
          imap({'get-box': boxes[num - 1]}, displayBox);
        });
      }

      function displayBox(box) {
        term.clear();
        var titles = [], max = 1, i;

        for(i = 0; i < box.length; i++)
          max = Math.max(max, box[i].sender.length);

        for(i = 0; i < box.length; i++)
          titles.push('${green:' + fescape(formatDate(box[i].time)) + '} '
                    + fescape(box[i].sender) + ' '.repeat(max - box[i].sender.length) + ' '
                    + fescape(box[i].subject) || '${italic,f_grey:' + tr('No subject') + '}');

        ignoreKeys = false;
        choice(titles.concat('${cyan:' + tr('Back to home') + '}'), function(ans) {
          ignoreKeys = true; term.set_prompt('');

          if(ans === titles.length + 1)
            return boxesMenu(g_menu);

          g_box = box;

          imap({'get-mail': box[ans - 1].id}, displayMail);
        });
      }

      function displayMail(mail) {
        term.clear();

        vars.mailbox = {
          adress   : (config.account.adress + '&#64;mailbox.net') /* The "&#64;" instead of a simple "@" fixes a jQuery.terminal very strange bug */,
          firstName: config.account.firstName,
          lastName : config.account.lastName ,
          fullName : config.account.firstName + config.account.lastName
        };

        display('${italic:' + tr('Subject :') + '} ' + fescape(mail.subject));
        display('${italic:' + tr('Date    :') + '} ' + fescape(formatDate(mail.time)));
        display(' ');
        display(mail.content);
        display(' ');

        term.set_prompt(tr('Press Return key to continue...'));
        delete vars.mailbox;

        ignoreKeys = false;
        keydownCallback = function(e) {
          if(e.keyCode === 13)
            displayBox(g_box);
          else
            return RESTORE_KEYDOWN_CALLBACK;
        };
      }

      imap({'list-inboxes': true}, boxesMenu);
    }
  }
});

register('mail-login', {
  legend   : tr('Login to your account'),
  arguments: [
    {
      short : 'a',
      long  : 'adress',
      legend: tr('Email to login as')
    },
    {
      short : 'p',
      long  : 'password',
      legend: tr('Password for specified email')
    }
  ],
  async   : true,
  callback: function(adress, password, resolve) {
    if(typeof adress !== 'string')
      return resolve('${red:' + tr('Command-line logger requires an email adress') + '}');

    if(typeof adress === 'string') {
      if(!password || typeof password !== 'string')
        return resolve('${red:' + tr('Command-line logger requires a password') + '}');

      _login(adress, password, resolve);
    }
  }
});

/**
  * Login to an account
  * @param {string} email
  * @param {string} password
  * @param {function} callback
  */
function _login(email, pass, callback) {
  term.set_prompt('Checking...'); ignoreKeys = true;

  // Ask the server for getting account informations
  req('mailbox.net/login', {adress: email, password: pass}, function(content) {
    // Try to parse server's response as a JSON object
    // If it fails, the server didn't return account informations
    try      { content = JSON.parse(content); }
    catch(e) { return callback('${red:' + tr('Wrong credentials, server refused login. Please try again.') + '}'); }

    // Write informations in the configuration file
    config.account        = content;
    config.account.adress = email  ;

    // If the user is not able to write this file
    if(!tokenWrite(ROOT_DIR, $TOKEN))
      err = tr('Mailbox requires an access to appdata directory');

    // If the write fails
    if(!server.writeFile(ROOT_DIR + '/config.rc', config))
      return callback('${red:' + tr('Failed to write configuration file. Please try again.') + '}');

    // All has been done !
    // User is now logged to his account !
    callback(tr('You\'ve been successfully logged in.\nWelcome, ${firstName} ${lastName} !', [content['firstName'], content['lastName']]));
  });
}

/**
  * Do a simple request to the server
  * @param {string} url
  * @param {object} data
  * @param {callback} success
  * @param {callback} [error] If omitted, will display an error and quit the program
  * @param {callback} [progress]
  */
function req(url, data, success, error, progress) {
  return server.download({
    dnsUrl  : url,
    data    : data,
    error   : error || function(err) {
      // Failed to get server's response
      global_callback('${red:' + tr('Failed to load server\'s informations. Please try again') + ' :}\n${italic:' + err.split('\n').join('}\n${italic:') + '}');
    },
    success : success ,
    progress: progress
  });
}

/**
  * Perform an IMAP request on the Mailbox server
  * @param {object} data
  * @param {callback} success
  * @param {callback} [error] If omitted, will display an error and quit the program
  */
function imap(data, success, error) {
  data.token = config.account.token;

  var eq, barSize = 50;

  return req('mailbox.net/imap', data, function(content) {
    term.set_prompt('');
    success(JSON.parse(content));
  }, function() {
    term.set_prompt('');
    error.apply(this, arguments);
  }, function(progress) {
    term.set_prompt('[' + '='.repeat(eq = Math.floor(progress * barSize)) + ' '.repeat(barSize - eq) + '] ' + Math.floor(progress * 100) + '%');
  });
}
