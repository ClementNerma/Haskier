'use strict';

/**
  * VPC interface
  * @constructor
  * @param {string} data Network plain data
  */
var VPC_Interface = function(data) {

  var act = [], errorDocuments = {}, split = data.split('\n'), line, match, homeFile;

  for(var i = 0; i < split.length; i++) {
    line = split[i].trim();

    if(!line || line.substr(0, 1) === '#') continue ;

    if(match = line.match(/^RewriteRule +([^ ]+) +([^ ]+)$/))
      // form: RewriteRule (test|advance) $1.xms
      act.push({do: 'rewrite', regex: new RegExp('^' + match[1] + '$'), replace: match[2]});
    else if(line.match(/^RewriteRule +/))
      fatal(tr('Bad URL rewriting syntax'));
    else if(match = line.match(/^ForbidAccess +(.+)$/))
      // form: ForbidAccess docs/(.*)
      act.push({do: 'forbidden', regex: new RegExp('^' + match[1] + '$')});
    else if(match = line.match(/^ErrorDocument +([0-9]{3}) +(.+)$/))
      // form: ErrorDocument 403 forbidden.xms
      errorDocuments[match[1]] = match[2];
    else if(match = line.match(/^HomeFile +(.*)$/))
      // form: HomeFile index.xms
      homeFile = match[1];
    else
      fatal(tr('Bad VPC file'));
  }

  /**
    * Parse an URL
    * @param {string} url
    * @return {object|boolean} Parsed URL, false if failed
    */
  this.parseUrl = function(url) {
    if(url.substr(-1) === '/' && url !== '/' && homeFile)
      return {url: url + homeFile};

    for(var parsed, i = 0; i < act.length; i++) {
      if(act[i].do === 'rewrite') {
        if(act[i].regex.test(url))
          return {
            url: url.replace(act[i].regex, act[i].replace)
          };
      } else if(act[i].do === 'forbidden') {
        if(act[i].regex.test(url))
          return {
            forbidden: true,
            url      : errorDocuments[403]
          };
      }
    }

    return false;
  };

};

VPC_Interface;
