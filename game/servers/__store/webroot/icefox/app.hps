'use strict';

register('icefox', {
  legend   : tr('Get a web page\'s content'),
  arguments: [
    {
      _       : 'url',
      legend  : tr('File\'s URL'),
      required: true
    },
    {
      _       : 'server',
      legend  : tr('Server\'s IP if you want to connect to a server. Then, remove the prefix ${grey:xxx://}'),
      regex   : RegexCollection.IP,
      error   : tr('Bad IP adress was specified')
    },
    {
      short   : 'd',
      long    : 'download',
      legend  : tr('Download location. If omitted, will just display the file.')
    }
  ],
  async    : true,
  callback : function(url, IP, dw, resolve) {
    if(!server.network('hypernet')) // ... is not a function
      return display_error(tr('Your computer is not connected to hypernet'));

    if(IP) {
      // connect to a specific server
      if(!servers.hasOwnProperty(IP) || !servers[IP].network('hypernet'))
        return display_error(tr('This server doesn\'t exist or isn\'t connected to hypernet'));
    } else {
      // use Hypernet DNS
      // here, we have to set the IP adress
      var parsed = networks.hypernet.parseUrl(url);

      if(!parsed)
        return resolve('${red:' + tr('Specified URL is not valid') + '}');

      IP  = parsed.IP ;
      url = parsed.url;
    }

    var content = '', eq, barSize = 50;
    term.set_prompt('[' + ' '.repeat(barSize) + '] 0%');

    server.download({
      url     : url,
      IP      : IP ,
      progress: function(progress) {
        term.set_prompt('[' + '='.repeat(eq = Math.floor(progress * barSize)) + ' '.repeat(barSize - eq) + '] ' + Math.floor(progress * 100) + '%');
      },
      error   : function(err) {
        resolve('${red:' + err.split('\n').join('}\n${red:') + '}');
      },
      success : function(content) {
        if(dw) {
          if(!server.writeFile(typeof dw === 'string' ? dw : url.split(/\//)[url.split(/\//).length - 1], content))
            resolve('${red:' + tr('Unable to write the download\'s location') + '}');
          else
            resolve(tr('Download has finished successfully'));
        } else
          resolve(content);
      }
    });
  }
});
